// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Category {
  Easy
  Medium
  Hard
}

model WordSequence {
  id        Int      @id @default(autoincrement())
  word      Word     @relation(fields: [wordId], references: [id])
  wordId    Int
  sequence  Sequence @relation(fields: [sequenceId], references: [id])
  sequenceId Int
  puzzle    Puzzle   @relation(fields: [puzzleId], references: [id])
  puzzleId  Int

  @@unique([puzzleId, wordId, sequenceId]) // Ensures each word-sequence pair is unique within a puzzle
}

model Puzzle {
  id         Int        @id @default(autoincrement())

  wordSequences WordSequence[]
  puzzleStats   PuzzleStats[]

  createdAt  DateTime   @default(now())
  datePlayed DateTime   @unique

  @@index([id])
}

model PuzzleStats {
  id          Int       @id @default(autoincrement())
  puzzleId    Int
  puzzle      Puzzle    @relation(fields: [puzzleId], references: [id])
  wordLength  Int
  
  lettersUsed  Decimal  @db.Decimal(3, 1) // 3 total digits, 1 after the decimal point
  timesGuessed Decimal  @db.Decimal(2, 1) // 2 total digits, 1 after the decimal point    
  timesFailed  Int      @default(0) // The number of times the puzzle has been failed
  timesSolved  Int      @default(0) // The number of times the puzzle has been solved
  timesPlayed  Int      @default(0)

  createdAt   DateTime  @default(now())

  @@index([puzzleId, wordLength])
  @@unique([puzzleId, wordLength])
}

model Word {
  id         Int        @id @default(autoincrement())
  word       String     @unique
  length     Int        // The length of the word
  sequences  Sequence[] @relation("WordSequences") // Many-to-many relationship with Sequence
  wordSequences WordSequence[]

  lastUsed   DateTime?  // The last time the word was used
  timesUsed  Int        @default(0) // The number of times the word has been used
  createdAt  DateTime   @default(now())

  @@index([length])
  @@index([length, timesUsed]) // WHERE length = x and timesUsed = y
}

model Sequence {
  id        Int        @id @default(autoincrement())
  letters   String     @unique // The sequence of letters
  words     Word[]     @relation("WordSequences") // Many-to-many relationship with Word
  scores    Score[]    // One-to-many relationship with Score
  wordSequences WordSequence[]

  lastUsed   DateTime?  // The last time the sequence was used
  timesUsed  Int        @default(0) // The number of times the sequence has been used
  createdAt  DateTime   @default(now())

  @@index([letters])
}

model Score {
  id         Int      @id @default(autoincrement())
  wordLength Int      // Represents the length of the word the sequence was found in
  score      Int      // The score for the sequence
  category   Category // The category of the word the sequence was found in

  sequenceId Int      // Foreign key to the Sequence model
  sequence   Sequence @relation(fields: [sequenceId], references: [id])

  @@index([sequenceId, wordLength])
  @@unique([sequenceId, wordLength]) // Ensures no duplicate score for the same sequence and word length
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}