// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Category {
  Easy
  Medium
  Hard
}

model Puzzle {
  id         Int        @id @default(autoincrement())

  words      Word[]     @relation("WordPuzzles") // Many-to-many relationship with Word
  sequences  Sequence[] @relation("SequencePuzzles") // Many-to-many relationship with Sequence

  lettersUsed  Int      @default(0) // The number of total letters used to solve the puzzle
  timesGuessed Int      @default(0) // The number of times the puzzle has been guessed
  timesFailed  Int      @default(0) // The number of times the puzzle has been failed
  timesSolved  Int      @default(0) // The number of times the puzzle has been solved

  createdAt  DateTime   @default(now())
  lastPlayed String?  // The last time the puzzle was played

  @@index([id])
}

model Word {
  id         Int        @id @default(autoincrement())
  word       String     @unique
  length     Int        // The length of the word
  sequences  Sequence[] @relation("WordSequences") // Many-to-many relationship with Sequence
  puzzles    Puzzle[]   @relation("WordPuzzles") // Many-to-many relationship with Puzzle

  lastUsed   DateTime?  // The last time the word was used
  timesUsed  Int        @default(0) // The number of times the word has been used
  createdAt  DateTime   @default(now())

  @@index([length])
  @@index([length, timesUsed]) // WHERE length = x and timesUsed = y
}

model Sequence {
  id        Int        @id @default(autoincrement())
  letters   String     @unique // The sequence of letters
  word      Word[]     @relation("WordSequences") // Many-to-many relationship with Word
  scores    Score[]    // One-to-many relationship with Score
  puzzles   Puzzle[]   @relation("SequencePuzzles") // One-to-many relationship with Puzzle

  lastUsed   DateTime?  // The last time the sequence was used
  timesUsed  Int        @default(0) // The number of times the sequence has been used
  createdAt  DateTime   @default(now())

  @@index([letters])
}

model Score {
  id         Int      @id @default(autoincrement())
  wordLength Int      // Represents the length of the word the sequence was found in
  score      Int      // The score for the sequence
  category   Category // The category of the word the sequence was found in

  sequenceId Int      // Foreign key to the Sequence model
  sequence   Sequence @relation(fields: [sequenceId], references: [id])

  @@index([sequenceId, wordLength])
  @@unique([sequenceId, wordLength]) // Ensures no duplicate score for the same sequence and word length
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}